alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
number = { digit+ }
float = { digit+ ~ "." ~ digit+ }
special_charaters = _{ "_" | "-" | "\\" }
whitespace = _{ (" "| "\n") * }
colon = _{":"}
lbracket = _{"["}
rbracket = _{"]"}
lparen = _{"("}
rparen = _{")"}
parenPair = _{ lparen ~ rparen}
at = _{ "@" }
path = { ">" }
reverse_path = { "<" }
asterisk = _{ "*" }
slash = { "/" }
double_dot = _{ ".." }
ident = { (alpha | digit | special_charaters | "_")+ }
_as = _{ "as" }
_arrow = _{ "->" }
as = { (" ")* ~ _as ~ (" ")* ~ literal }
_asDeref = _{ "as*"}
_arrowDeref = _{"->*"}
asDeref = { (" ")* ~ _asDeref ~ (" ")* ~ literal }
arrow = { (" ")* ~ _arrow ~ (" ")* ~ literal }
arrowDeref = { (" ")* ~ _arrowDeref ~ (" ")* ~ literal }
sharp = _{ "#" }
dot = _{ "." }
greater = { ">" }
less = { "<" }
greater_equal = { ">=" }
less_equal = { "<=" }
equal = { "==" }
almost = { "~=" }
not_euql = { "!=" }
cmp = { almost | not_euql | greater_equal | less_equal | equal | greater | less }
true_bool = { "true" }
false_bool = { "false" }
truthy = { true_bool | false_bool }
string = { (alpha | digit | special_charaters | " " | "%" | "{" | "}" | "\\" )+ ~ (whitespace ~ string)* }
literal = { "'" ~ string ~ "'" }
literal_keyed = { literal ~ as? }
grouped_literal = { lparen ~ whitespace ~ literal ~ (whitespace ~ ("|") ~ whitespace ~ literal)* ~ rparen }
and = { "and" }
or = { "or" }
logical_cmp = { and | or }
child = { slash ~ ident }
any_child = { slash ~ asterisk  }
keyed_ident = { literal ~ whitespace ~ "=" ~ whitespace ~ literal }
ident_or_keyed = { ( lparen ~ keyed_ident ~ rparen )| ident }
descendant_child = { slash ~ double_dot ~ ident_or_keyed }
grouped_any = { slash ~ grouped_literal }
array_index = { slash ~ "[" ~ number ~ "]" }
pure_index = {"[" ~ number ~ "]"}
slice = { slash ~ "[" ~ number ~ ":" ~ number ~ "]" }
array_to = { slash ~ "[:" ~ number ~ "]" }
array_from = { slash ~ "[" ~ number ~ ":]" }
pick = {
    sharp ~ "pick"  ~
    "(" ~ whitespace ~ (literal_keyed | (sub_expression_keyed | sub_expression_keyed_reversed) ) ~ whitespace ~
    (whitespace ~ (",") ~ whitespace ~ (literal_keyed | (sub_expression_keyed | sub_expression_keyed_reversed) ))* ~
    whitespace ~ ")"
}
sub_expression = { path ~ (pickFn ~ whitespace| filterFn ~ whitespace| child ~ whitespace| any_child ~ whitespace| grouped_any ~ whitespace| descendant_child ~ whitespace| array_index ~ whitespace| slice ~ whitespace| array_to ~ whitespace| array_from ~ whitespace| fn ~ whitespace)* }
sub_expression_reversed = { reverse_path ~ (pickFn | filterFn | grouped_any | child | any_child | descendant_child | array_index | slice | array_to | array_from | fn )* }
sub_expression_keyed = { sub_expression ~ as? }
sub_expression_keyed_reversed = { sub_expression_reversed ~ as? }
pickFn = { slash ~ pick }
fnLit = { literal }
fnExpr = { sub_expression }
fnCall = { sharp ~ ident ~ (whitespace ~ lparen ~ ((mapStmt|filterStmtCollection|fnLit|fnExpr) ~ whitespace ~ ((",") ~ whitespace ~ (mapStmt|filterStmtCollection|fnLit|fnExpr))*)? ~ whitespace ~ rparen ~ whitespace)? ~ (arrow | arrowDeref)? }
fn = {slash ~ fnCall}
filterStmt = { ( filter_elem ~ whitespace ~ cmp ~ whitespace ~ (float | truthy | literal | number ) ) }
filterStmtCollection = { filterStmt ~ whitespace ~ (logical_cmp ~ whitespace ~ filterStmt~ whitespace)*  }
filter = { sharp ~ "filter" ~ lparen ~ whitespace ~ ( filterStmt ~ whitespace ~ (logical_cmp ~ whitespace ~ filterStmt~ whitespace)* ) ~ whitespace ~ rparen }
filter_elem = { literal }
filterFn = { slash ~ filter }
methodCall = {ident ~ "()"}
pathExpr = { ident ~  (dot ~ (pure_index|methodCall|ident))* }
mapStmt = { ident ~ whitespace ~ colon ~ whitespace ~ pathExpr }

expression = {
    (path|reverse_path) ~ whitespace ~
    (whitespace ~ pickFn ~ whitespace | filterFn ~ whitespace| grouped_any ~ whitespace | child  ~ whitespace | any_child  ~ whitespace | descendant_child  ~ whitespace | array_index  ~ whitespace | slice  ~ whitespace | array_to  ~ whitespace | array_from  ~ whitespace | fn ~ whitespace)* ~
    EOI
}
