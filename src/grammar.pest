alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
number = { digit+ }
float = { digit+ ~ "." ~ digit+ }
special_charaters = _{ "_" | "-" | "\\" }
whitespace = _{ (" "| "\n") * }
lparen = _{"("}
rparen = _{")"}
at = _{ "@" }
path = { ">" }
reverse_path = { "<" }
asterisk = _{ "*" }
slash = { "/" }
double_dot = _{ ".." }
ident = { (alpha | digit | special_charaters)+ }
_as = _{ "as" }
as = { (" ")* ~ _as ~ (" ")* ~ literal }
_asDeref = _{ "as*"}
asDeref = { (" ")* ~ _asDeref ~ (" ")* ~ literal }
sharp = _{ "#" }
dot = _{ "." }
greater = { ">" }
less = { "<" }
greater_equal = { ">=" }
less_equal = { "<=" }
equal = { "==" }
almost = { "~=" }
cmp = { almost | greater_equal | less_equal | equal | greater | less }
true_bool = { "true" }
false_bool = { "false" }
truthy = { true_bool | false_bool }
string = { (alpha | digit | special_charaters | " " | "%" | "{" | "}" | "\\" )+ ~ (whitespace ~ string)* }
literal = { "'" ~ string ~ "'" }
literal_keyed = { literal ~ as? }
grouped_literal = { lparen ~ whitespace ~ literal ~ (whitespace ~ ("|") ~ whitespace ~ literal)* ~ rparen }
and = { "and" }
or = { "or" }
logical_cmp = { and | or }
child = { slash ~ ident }
any_child = { slash ~ asterisk }
descendant_child = { slash ~ double_dot ~ ident }
grouped_any = { slash ~ grouped_literal }
array_index = { slash ~ "[" ~ number ~ "]" }
slice = { slash ~ "[" ~ number ~ ":" ~ number ~ "]" }
array_to = { slash ~ "[:" ~ number ~ "]" }
array_from = { slash ~ "[" ~ number ~ ":]" }
pick = {
    sharp ~ "pick" ~ (" ")* ~
    "(" ~ (literal_keyed | (sub_expression_keyed | sub_expression_keyed_reversed) ) ~
    ((",") ~ (" ")* ~ (literal_keyed | (sub_expression_keyed | sub_expression_keyed_reversed) ))* ~
    (" ")* ~ ")"
}
sub_expression = { path ~ (formatsFn | lenFn | allFn | pickFn | sumFn | filterFn | child | any_child | grouped_any | descendant_child | array_index | slice | array_to | array_from)* }
sub_expression_reversed = { reverse_path ~ (formatsFn | lenFn | allFn | pickFn | sumFn | filterFn | grouped_any | child | any_child | descendant_child | array_index | slice | array_to | array_from)* }
sub_expression_keyed = { sub_expression ~ as? }
sub_expression_keyed_reversed = { sub_expression_reversed ~ as? }

squash = { sharp ~ "squash" ~ "(" ~ ")" }
sum = { sharp ~ "sum" }
len = { sharp ~ "len" }
all = { sharp ~ "all" }
allFn = { slash ~ all }
lenFn = { slash ~ len }
sumFn = { slash ~ sum }
squashFn = { slash ~ squash }
pickFn = { slash ~ pick }
formats = { sharp ~ "formats" ~ whitespace ~ lparen ~ literal ~ ((",")* ~ whitespace ~ literal)+ ~ whitespace ~ rparen ~ whitespace ~ (as | asDeref)}
formatsFn = { slash ~ formats }
fnCall = { sharp ~ ident ~ whitespace ~ lparen ~ ((literal|sub_expression) ~ whitespace ~ ((",")* ~ whitespace ~ (literal|sub_expression))*)? ~ whitespace ~ rparen ~ whitespace ~ (as | asDeref)? }
filterStmt = { ( filter_elem ~ whitespace ~ cmp ~ whitespace ~ (float | truthy | literal | number ) ) }
filter = { sharp ~ "filter" ~ lparen ~ whitespace ~ ( filterStmt ~ whitespace ~ (logical_cmp ~ whitespace ~ filterStmt~ whitespace)* ) ~ whitespace ~ rparen }
filter_elem = { literal }
filterFn = { slash ~ filter }

expression = {
    (path|reverse_path) ~
    (formatsFn | lenFn | allFn | pickFn | sumFn | filterFn | grouped_any | child | any_child | descendant_child | array_index | slice | array_to | array_from)* ~
    EOI
}
