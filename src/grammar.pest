alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
number = { digit+ }
float = { digit+ ~ "." ~ digit+ }
special_charaters = _{ "_" | "-" | "\\" }

path = { ">" }
asterisk = _{ "*" }
slash = { "/" }
double_dot = _{ ".." }
ident = { (alpha | digit | special_charaters)+ }

child = { slash ~ ident }
any_child = { slash ~ asterisk }
descendant_child = { slash ~ double_dot ~ ident }
array_index = { slash ~ "[" ~ number ~ "]" }
slice = { slash ~ "[" ~ number ~ ":" ~ number ~ "]" }
array_to = { slash ~ "[:" ~ number ~ "]" }
array_from = { slash ~ "[" ~ number ~ ":]" }
pick = { "pick" ~ (" ")* ~ "(" ~ (literal_keyed | sub_expression_keyed ) ~ ((",") ~ (" ")* ~ (literal_keyed | sub_expression_keyed ))* ~ (" ")* ~ ")" }
squash = { "squash" ~ "(" ~ ")" }
squashFn = { slash ~ squash }
pickFn = { slash ~ pick }
_as = _{ "as" }
as = { (" ")* ~ _as ~ (" ")* ~ literal }

sub_expression = { path ~ (pickFn | child | any_child | descendant_child | array_index | slice | array_to | array_from)* }
sub_expression_keyed = { sub_expression ~ as? }
string = { (alpha | digit | special_charaters | " ")+ }
literal = { "'" ~ string ~ "'" }
literal_keyed = { literal ~ as? }

array = {
    "[" ~
        (" ")* ~
            (
                float ~ ((",") ~ (" ")* ~ float)* |
                number ~ ((",") ~ (" ")* ~ number)* |
                literal ~ ((",") ~ (" ")* ~ literal)*
            ) ~
        (" ")* ~
    "]"
}

expression = {
    path ~
    (pickFn | child | any_child | descendant_child | array_index | slice | array_to | array_from)* ~
    EOI
}